{
  "_args": [
    [
      {
        "raw": "mongodb-uri@^0.9.7",
        "scope": null,
        "escapedName": "mongodb-uri",
        "name": "mongodb-uri",
        "rawSpec": "^0.9.7",
        "spec": ">=0.9.7 <0.10.0",
        "type": "range"
      },
      "/Users/zhongliu/Desktop/NEU/Taylor/new/MONGO_UPLOAD/node_modules/multer-gridfs-storage"
    ]
  ],
  "_from": "mongodb-uri@>=0.9.7 <0.10.0",
  "_id": "mongodb-uri@0.9.7",
  "_inCache": true,
  "_location": "/mongodb-uri",
  "_npmUser": {
    "name": "jcottr",
    "email": "jcottr@gmail.com"
  },
  "_npmVersion": "1.4.15",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mongodb-uri@^0.9.7",
    "scope": null,
    "escapedName": "mongodb-uri",
    "name": "mongodb-uri",
    "rawSpec": "^0.9.7",
    "spec": ">=0.9.7 <0.10.0",
    "type": "range"
  },
  "_requiredBy": [
    "/multer-gridfs-storage"
  ],
  "_resolved": "https://registry.npmjs.org/mongodb-uri/-/mongodb-uri-0.9.7.tgz",
  "_shasum": "0f771ad16f483ae65f4287969428e9fbc4aa6181",
  "_shrinkwrap": null,
  "_spec": "mongodb-uri@^0.9.7",
  "_where": "/Users/zhongliu/Desktop/NEU/Taylor/new/MONGO_UPLOAD/node_modules/multer-gridfs-storage",
  "author": {
    "name": "MongoLab",
    "email": "support@mongolab.com"
  },
  "bugs": {
    "url": "https://github.com/mongolab/mongodb-uri-node/issues"
  },
  "contributors": [
    {
      "name": "Jared D. Cottrell",
      "email": "jared@mongolab.com"
    }
  ],
  "dependencies": {},
  "description": "A parser and formatter for MongoDB URIs.",
  "devDependencies": {
    "jake": "0.5.x",
    "jake-mocha": "0.9.x",
    "mocha": "1.9.x",
    "should": "1.2.x"
  },
  "directories": {},
  "dist": {
    "shasum": "0f771ad16f483ae65f4287969428e9fbc4aa6181",
    "tarball": "https://registry.npmjs.org/mongodb-uri/-/mongodb-uri-0.9.7.tgz"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "gitHead": "2f4fcd3c703fe016d35e7e58254ad6c7feffeaa8",
  "homepage": "https://github.com/mongolab/mongodb-uri-node",
  "keywords": [
    "mongodb",
    "uri",
    "url",
    "parser",
    "formatter",
    "mongoose"
  ],
  "license": "MIT",
  "main": "mongodb-uri",
  "maintainers": [
    {
      "name": "jcottr",
      "email": "jcottr@gmail.com"
    }
  ],
  "name": "mongodb-uri",
  "optionalDependencies": {},
  "readme": "# mongodb-uri\n\nParse and format MongoDB URIs of the form:\n\n```\nmongodb://[username[:password]@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database]][?options]\n```\n\nNote that there are two minor differences between this format and the\n[standard MongoDB connect string URI format](http://docs.mongodb.org/manual/reference/connection-string/):\n\n1. `password` is optional even when a `username` is supplied\n2. The slash before the `database` is not required when leaving out the `database` but specifying `options`\n\nNeither of these differences should prevent this library from parsing any URI conforming to the standard format.\n\n## Usage\n\n### parse\n\nTakes a URI string and returns a URI object of the form:\n\n```\n{\n  scheme: !String,\n  username: String=,\n  password: String=,\n  hosts: [ { host: !String, port: Number= }, ... ],\n  database: String=,\n  options: Object=\n}\n```\n\n`scheme` and `hosts` will always be present. Other fields will only be present in the result if they were present in the\ninput.\n\n#### Example\n\n```javascript\nvar mongodbUri = require('mongodb-uri');\nvar uri = 'mongodb://user%3An%40me:p%40ssword@host:1234/d%40tabase?authSource=%40dmin';\nvar uriObject = mongodbUri.parse(uri);\nconsole.log(JSON.stringify(uriObject, null, 2));\n```\n\n```\n{\n  \"scheme\": \"mongodb\",\n  \"hosts\": [\n    {\n      \"host\": \"host\",\n      \"port\": 1234\n    }\n  ],\n  \"username\": \"user:n@me\",\n  \"password\": \"p@ssword\",\n  \"options\": {\n    \"authSource\": \"@dmin\"\n  },\n  \"database\": \"d@tabase\"\n}\n```\n\n### format\n\nTakes a URI object and returns a URI string.\n\n#### Example\n\n```javascript\nvar mongodbUri = require('mongodb-uri');\nvar uri = mongodbUri.format(\n        {\n            username: 'user:n@me',\n            password: 'p@ssword',\n            hosts: [\n                {\n                    host: 'host',\n                    port: 1234\n                }\n            ],\n            database: 'd@tabase',\n            options: {\n                authSource: '@dmin'\n            }\n        }\n);\nconsole.log(uri);\n```\n\n```\nmongodb://user%3An%40me:p%40ssword@host:1234/d%40tabase?authSource=%40dmin\n```\n\n### formatMongoose\n\nTakes either a URI object or string and returns a Mongoose connection string. Specifically, instead of listing all hosts\nand ports in a single URI, a Mongoose connection string contains a list of URIs each with a single host and port pair.\n\nUseful in environments where a MongoDB URI environment variable is provided, but needs to be programmatically\ntransformed into a string digestible by [mongoose.connect()](http://mongoosejs.com/docs/connections.html)--for example,\nwhen deploying to a [PaaS like Heroku using a MongoDB add-on like MongoLab](https://devcenter.heroku.com/articles/mongolab).\n\n#### Example\n\n```javascript\nvar mongoose = require('mongoose');\nvar mongodbUri = require('mongodb-uri');\n\n// A MongoDB URI, not compatible with Mongoose because it lists multiple hosts in the address\n// Could be pulled from an environment variable or config file\nvar uri = 'mongodb://username:password@host1:1234,host2:5678/database';\n\n// Reformat to a Mongoose connect string and connect()\nvar mongooseConnectString = mongodbUri.formatMongoose(uri);\nmongoose.connect(mongooseConnectString);\n\n// Test for connection success\nvar db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'Connection error: '));\ndb.once('open', function callback () {\n    console.log('Successfully connected to MongoDB');\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mongolab/mongodb-uri-node.git"
  },
  "scripts": {
    "test": "jake --trace"
  },
  "version": "0.9.7"
}
